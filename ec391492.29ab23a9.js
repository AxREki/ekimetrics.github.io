(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{104:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),i=(a(0),a(112)),o={title:"my hello page title",description:"my hello page description",hide_table_of_contents:!0},c={type:"mdx",permalink:"/opensource/pyepidemics",source:"@site/src\\pages\\opensource\\pyepidemics.md"},l=[{value:"Install using pip",id:"install-using-pip",children:[]},{value:"Install from source",id:"install-from-source",children:[]},{value:"Folder structure",id:"folder-structure",children:[]},{value:"Creating a SIR model",id:"creating-a-sir-model",children:[]},{value:"Creating a custom compartmental model",id:"creating-a-custom-compartmental-model",children:[]}],s={toc:l};function p(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"pyepidemics"},"Pyepidemics"),Object(i.b)("p",null,Object(i.b)("img",{alt:"img",src:a(175).default})),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Open-source epidemics modeling Python library")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"pyepidemics")," is a Python library to easily manipulate epidemiological models (SIR, SEIR, COVID19), forecast, and test policy scenarios. Main features are: "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Creation of classical compartmental models (SIR, SEIR, SEIDR, etc...)"),Object(i.b)("li",{parentName:"ul"},"Creation of COVID19 related model (with ICU and different levels of symptoms)"),Object(i.b)("li",{parentName:"ul"},"Creation of custom compartmental model"),Object(i.b)("li",{parentName:"ul"},"Easy extend to compartmental model on different levels (by age, by region, by age and region, etc...)"),Object(i.b)("li",{parentName:"ul"},"Implementation of contact matrices"),Object(i.b)("li",{parentName:"ul"},"Implementation of policies (lockdown, tracing, testing, etc...)"),Object(i.b)("li",{parentName:"ul"},"Calibration of epidemiological parameters on real-world data using Bayesian optimization "),Object(i.b)("li",{parentName:"ul"},"Data helpers to get up-to-date data (cases, beds availability, population contact matrices) (NB as of today only for France cases)"),Object(i.b)("li",{parentName:"ul"},"Simple curve fitting algorithms"),Object(i.b)("li",{parentName:"ul"},"Economics modeling on consumption and production")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"This library is under active development, please contact ",Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:"mailto:theo.alvesdacosta@ekimetrics.com"}),"Th\xe9o Alves Da Costa")," if you need more information and would like to contribute"))),Object(i.b)("h1",{id:"contributors"},"Contributors"),Object(i.b)("p",null,"The library has been initially developed by ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.ekimetrics.com"}),"Ekimetrics")," under the coalition of French AI companies CoData ot help French government response to the COVID19 pandemics. Main contributors are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"mailto:theo.alvesdacosta@ekimetrics.com"}),"Th\xe9o Alves Da Costa"),", Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"Emilie Rannou, Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"L\xe9o Grosjean, Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"Pierre Carles, Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"Nicolas Chesneau, Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"Marianne Chehade, Ekimetrics"),Object(i.b)("li",{parentName:"ul"},"Jean-Baptiste Remy")),Object(i.b)("h1",{id:"installation"},"Installation"),Object(i.b)("h2",{id:"install-using-pip"},"Install using pip"),Object(i.b)("p",null,"We recommend to create a virtual environment first, then you can install the library using the command "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"pip install pyepidemics\n")),Object(i.b)("p",null,"The repo is on PyPI at ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pypi.org/project/pyepidemics/"}),"https://pypi.org/project/pyepidemics/")),Object(i.b)("h2",{id:"install-from-source"},"Install from source"),Object(i.b)("p",null,"You can also install the repository by cloning it locally and using it either locally or installing the wheel by calling first"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"python setup.py sdist bdist_wheel\n")),Object(i.b)("h1",{id:"documentation"},"Documentation"),Object(i.b)("p",null,"Documentation is available at ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://collectif-codata.github.io/pyepidemics"}),"https://collectif-codata.github.io/pyepidemics")),Object(i.b)("h2",{id:"folder-structure"},"Folder structure"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"- pyepidemics/          --------- Python library centralizing source code\n    - dataset/          --------- Helpers to get up-to-date COVID19 datasets\n    - models/           --------- Compartmental models code\n    - params/           --------- Epidemiological parameters calibration optimizers\n    - policies/         --------- Scenarios implementation\n    - visualization/    --------- Visualization helpers (chloropleth maps using pydeck)\n- data/                 --------- Local datasets if needed\n- docs/                 --------- Documentation and tutorial notebooks\n- notebook/             --------- Development notebooks\n- references/           --------- Reports and research papers\n- scripts/              --------- Automation scripts on calibration\n- requirements.txt      --------- Python requirements \n")),Object(i.b)("h1",{id:"quickstart"},"Quickstart"),Object(i.b)("h2",{id:"creating-a-sir-model"},"Creating a SIR model"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# Import library\nfrom pyepidemics.models import SIR\n\n# Let\'s take approximate parameters during COVID19 epidemics\nN = 67e6\nbeta = 3.3/4\ngamma = 1/4\n\n# Instantiate model with epidemiological parameters\nsir = SIR(N,beta,gamma)\n\n# Solve for one infected case for 100 days starting from 2020-01-24\nstates = sir.solve(1,n_days = 100,start_date = "2020-01-24")\n\n# Visualize epidemic curves using matplotlib (plotly available)\nstates.show(plotly = False)\n')),Object(i.b)("h2",{id:"creating-a-custom-compartmental-model"},"Creating a custom compartmental model"),Object(i.b)("p",null,"Here is the example to create a model like the SIR described above"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from pyepidemics.models import CompartmentalModel\n\n\nclass SIR(CompartmentalModel):\n    def __init__(self,N,beta,gamma):\n        \n        # Define compartments name and number\n        compartments = ["S","I","R"]\n        super().__init__(compartments)\n\n        # Parameters\n        self.N = N # Total population\n        self.beta = beta # How many person each person infects per day\n        self.gamma = gamma # Rate of infection, duration = 1/gamma\n        \n        # Add transition\n        self.add_transition("S","I",lambda y,t: self.beta * y["S"] * y["I"] / self.N)\n        self.add_transition("I","R",lambda y,t: self.gamma * y["I"])\n\n')),Object(i.b)("h1",{id:"contribution-guidelines"},"Contribution guidelines"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"WIP")),Object(i.b)("h1",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://towardsdatascience.com/infectious-disease-modelling-beyond-the-basic-sir-model-216369c584c4"}),"https://towardsdatascience.com/infectious-disease-modelling-beyond-the-basic-sir-model-216369c584c4"))),Object(i.b)("h1",{id:"license"},"License"),Object(i.b)("p",null,"MIT License"))}p.isMDXComponent=!0},112:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},m=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=n,d=m["".concat(o,".").concat(u)]||m[u]||b[u]||i;return a?r.a.createElement(d,c(c({ref:t},s),{},{components:a})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<i;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},175:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/logo_pyepidemics-d992447cfee0603675b9a13d84e1c747.png"}}]);